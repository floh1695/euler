module Problem2
  (problem2
  ) where

{-
# Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by
  adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values
  do not exceed four million,
  find the sum of the even-valued terms.
-}
problem2 :: Integer
problem2 = solution
  where
    baseNumbers = mapUntil fib (> 4000000) [0..]
    filteredNumbers = filter even baseNumbers
    solution = sum filteredNumbers

mapUntil :: (a -> b) -> (b -> Bool) -> [a] -> [b]
mapUntil f p xs = mapUntilInner [] f p xs

mapUntilInner :: [b] -> (a -> b) -> (b -> Bool) -> [a] -> [b]
mapUntilInner ys f p (x:xs)
  | continue  = mapUntilInner (y:ys) f p xs
  | otherwise = ys
  where
    y        = f x
    continue = not $ p y

fib :: Integer -> Integer
fib n = fibInner n 0 1

fibInner :: Integer -> Integer -> Integer -> Integer
fibInner n current previous
  | n == 0    = current
  | otherwise = fibInner n' current' previous'
  where
    n'        = n - 1
    current'  = current + previous
    previous' = current
